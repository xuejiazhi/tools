// use std::env;

// use simple_redis::{client, RedisError};

extern crate simple_redis;

fn main() {
    //获取参数
    // let args: Vec<String> = env::args().collect();
    // println!("args=>{:?}",args);

    // let mut clients = RedisParams { 
    //     host: String::from("10.161.30.164"),
    //     port: String::from("12200"),
    //     db: 0,
    //     auth: String::from("hjsdfo@!#1234..#@"),
    // }
    // .new();

    // let mut clients = RedisParams { 
    //     host: String::from("127.0.0.1"),
    //     port: String::from("6379"),
    //     db: 0,
    //     auth: String::from(""),
    // }
    // .new();

    let  parmas =  RedisParams { 
        host: String::from("127.0.0.1"),
        port: String::from("6379"),
        db: 0,
        auth: String::from(""),
    };

    let mut clients = parmas.new();
    
    let str_val = clients.get::<String>("test").unwrap();
    println!("v=>{}",str_val);
    // match &str_val {
    //     Ok(mut str) => {
    //         println!("value=>{}", str)
    //     }
    //     Err(error) => {
    //         println!("Get Key {} Error：{}", "Affa_Sub_32896668190032845", error)
    //     }
    // }
}

#[derive(Debug)]
struct RedisParams {
    host: String,
    port: String,
    db: u16,
    auth: String,
}

impl RedisParams {
    //connect redis server
    fn new(&self) -> simple_redis::client::Client {
        let s = format!("redis://{}:{}/{}", self.host, self.port, self.db);
        match simple_redis::create(&s) {
            Ok(mut client) => {
                if !String::from(&self.auth).is_empty(){
                    match client.auth(&self.auth) {
                        Err(error) => {
                            panic!("Auth error: {}", error)
                        }
                        _ => {
                            println!("Authenticated");
                            client
                        }
                    }
                }else{
                    client
                }
                
            },
            Err(error) => panic!("Unable to create Redis client: {}", error),
        }
    }
}
